"""
Contains classes that represent messages sent down the wire between nodes on
the network.

Named tuples are used because they are lightweight, immutable and indexable
(thus mimicing the dict like structure of the msgpack encoded message passed
down the wire).

Copyright (C) 2012 Nicholas H.Tollervey.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
from collections import namedtuple


"""
Defines the errors that can be reported between nodes in the DHT.
"""
ERRORS = {
    # The request simply didn't make any sense.
    1: 'Bad request',
    # The request was parsed but not recognised.
    2: 'Unknown request',
    # The request was parsed and recognised but the node encountered a problem
    # when dealing with it.
    3: 'Internal error',
    # The request was too big for the node to handle.
    4: 'Request too big',
    # Unsupported version of the protocol.
    5: 'Unsupported protocol version',
    # The request could not be cryptographically verified.
    6: 'Unverifiable provenance'
}


"""
Represents an error message to be sent to the calling node on the network.

id - the request id that generated the error.
code - the code that identifies the specific error.
title - a description of the type of error generated.
details - any details that may be useful for diagnosing the error.
version - the protocol version the message conforms to.
"""
Error = namedtuple('Error', ['id', 'code', 'title', 'details', 'version'])


"""
A "ping" message is sent to another node on the network to determine if it
is still contactable.

id - the ping's request id (a random value generated by the requestor that
uniquely identifies the request).
version - the protocol version the message conforms to.
"""
Ping = namedtuple('Ping', ['id', 'version'])


"""
A "pong" message is sent as a response to a ping request.

id - the ping request's id.
version - the protocol version the message conforms to.
"""
Pong = namedtuple('Pong', ['id', 'version'])


"""
A "store" message instructs another node on the network to store the given
key/value pair.

id - the Store request's id (generated by the requestee).
key - the SHA1 value of the compound key used as the actual key on the DHT.
value - the value to be stored in the DHT.
time - a timestamp indicating when this k/v was *originally* generated.
public_key - the public key of the person storing the value.
name - the human-readable name of the key.
hash - the cryptographic hash of the value, time and name fields.
version - the protocol version the message conforms to.

The provenance of the message is guaranteed through cryptography:

The 'hash' field was created with the private key of the person storing the
key/value pair. It's a SHA1 hash of the SHA1 hashes of the 'val', 'time' and
'key' fields. This mechanism ensures that the public_key used in the compound
key is valid (i.e. it creates the correct SHA1 hash) and also ensures that the
'val', 'time' and 'name' fields have not been tampered with.

The 'key' value is a compound key. It is a SHA1 hash of the SHA1 hashes of the
'public_key' and 'name' fields. The 'public_key' and 'name' fields are used to
ensure that the compound 'key' field is correct.
"""
Store = namedtuple('Store',
    ['id', 'key', 'value', 'time', 'public_key', 'name', 'hash', 'version'])


"""
A "find node" message requests k nodes from the other node on the network that
are closest to the given key.

id - the FindNode request's id (generated by the requestee).
key - the key in the DHT that is being targetted.
version - the protocol version the message conforms to.
"""
FindNode = namedtuple('FindNode', ['id', 'key', 'version'])


"""
A response to either a FindNode or FindValue request that contains a list of
nodes on the DHT that are close to the requested key.

id - the id of the request that is causing the response.
nodes - a list of nodes on the DHT that are close to the requested key.
version - the protocol version the message conforms to.
"""
Nodes = namedtuple('Nodes', ['id', 'nodes', 'version'])


"""
A "find value" message will cause the other node to return the corresponding
value if the given key is in its store. Otherwise it returns k nodes that it
knows about that are closest to the given key.

id - the FindValue request's id (generated by the requestee).
key - the key in the DHT whose value is being requested.
version - the protocol version the message conforms to.
"""
FindValue = namedtuple('FindValue', ['id', 'key', 'version'])


"""
A response to a FindValue request. Contains all the information known by the
responder about the key/value pair. Such complete information can be used to
check the provenance of the data as described in the documentation for the
Store message described above.

id - the id of the request that is causing the response.
key - the SHA1 value of the compound key used as the actual key on the DHT.
value - the value found in the DHT.
time - a timestamp indicating when this k/v was *originally* generated.
public_key - the public key of the person who stored the value.
name - the human-readable name of the key.
hash - the cryptographic hash of the value, time and name fields.
version - the protocol version the message conforms to.
"""
Value = namedtuple('Value',
    ['id', 'key', 'value', 'time', 'public_key', 'name', 'hash', 'version'])
